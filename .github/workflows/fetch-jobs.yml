name: Fetch All Job Data from Google Sheets

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # ✅ Required for GITHUB_TOKEN to push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Google APIs client
        run: npm install googleapis

      - name: Write service account key
        run: echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}' > key.json

      - name: Fetch job data from all sheets
        run: |
          node <<'EOF'
          const { google } = require('googleapis');
          const fs = require('fs');

          const auth = new google.auth.GoogleAuth({
            keyFile: 'key.json',
            scopes: [
              'https://www.googleapis.com/auth/drive.readonly',
              'https://www.googleapis.com/auth/spreadsheets.readonly',
            ],
          });

          async function fetchSheets() {
            const authClient = await auth.getClient();
            const drive = google.drive({ version: 'v3', auth: authClient });
            const sheets = google.sheets({ version: 'v4', auth: authClient });

            const filesRes = await drive.files.list({
              q: "mimeType='application/vnd.google-apps.spreadsheet' and name contains '-grads'",
              fields: 'files(id, name)',
              pageSize: 1000
            });

            const allJobs = [];

            for (const file of filesRes.data.files) {
              console.log(`Fetching: ${file.name}`);
              try {
                const meta = await sheets.spreadsheets.get({ spreadsheetId: file.id });
                const firstSheetName = meta.data.sheets[0].properties.title;
                const range = `${firstSheetName}!A1:Z1000`;

                const res = await sheets.spreadsheets.values.get({
                  spreadsheetId: file.id,
                  range,
                });

                const rows = res.data.values;
                if (!rows || rows.length < 2) {
                  console.log(`No data found in ${file.name}`);
                  continue;
                }

                const headers = rows[0];
                const jobRows = rows.slice(1);

                const jobs = jobRows.map(row => {
                  const job = {};
                  headers.forEach((h, i) => {
                    job[h.trim()] = row[i] || '';
                  });
                  job.source = file.name;
                  return job;
                });

                allJobs.push(...jobs);
              } catch (err) {
                console.error(`Error reading ${file.name}:`, err.message);
              }
            }

            fs.writeFileSync('all-jobs.json', JSON.stringify(allJobs, null, 2));
            console.log(`✅ Fetched ${allJobs.length} jobs from ${filesRes.data.files.length} sheets`);
          }

          fetchSheets().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF

      - name: Commit job data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "you@example.com"
          git add all-jobs.json
          git commit -m "Updated all job listings" || echo "No changes"
          git push origin HEAD
